apiVersion: ai.sap.com/v1alpha1
kind: ServingTemplate
metadata:
  name: cpiflow-serving-pipeline
  annotations:
    scenarios.ai.sap.com/name: "CPIFLOW Optimizer PRO"
    scenarios.ai.sap.com/description: "Serving CPIFLOW classifier via KServe"
    executables.ai.sap.com/name: "cpiflow-model-serving"
    executables.ai.sap.com/description: "FastAPI server for CPIFLOW classifier"
    artifacts.ai.sap.com/cpiflowmodel.kind: "model"
  labels:
    scenarios.ai.sap.com/id: "cpiflow-optimizer-pro"
    ai.sap.com/version: "10.4"   # bump to force a fresh Revision
spec:
  inputs:
    artifacts:
      - name: cpiflowmodel
  template:
    apiVersion: "serving.kserve.io/v1beta1"
    metadata:
      annotations: |
        autoscaling.knative.dev/metric: concurrency
        autoscaling.knative.dev/target: 1
        autoscaling.knative.dev/targetBurstCapacity: 0
      labels: |
        ai.sap.com/resourcePlan: starter
    spec: |
      predictor:
        minReplicas: 1
        maxReplicas: 2
        containers:
        - name: kserve-container
          image: docker.io/balakalyandocker/cpiflow-serve:py312-v1
          imagePullPolicy: Always
          ports:
            - name: http1
              containerPort: 8080
              protocol: TCP
          command: ["/bin/sh","-c"]
          args:
            - >
              set -e; M="${MODEL_MOUNT_DIR:-/mnt/models}"; echo "== DEBUG: mounted at $M =="; ls -la "$M" || true;
              TGZ="$(find "$M" -type f \( -name model.pkl.tgz -o -name cpiflowmodel.tgz -o -name '*.pkl.tgz' \) 2>/dev/null | head -n 1)";
              if [ -n "$TGZ" ]; then echo "Found tarball: $TGZ"; tar -xzf "$TGZ" -C "$(dirname "$TGZ")" || { echo "untar failed"; exit 2; }; fi;
              FOUND="$(find "$M" -type f \( -name model.pkl -o -name cpiflowmodel -o -name '*.pkl' -o -name '*.joblib' \) 2>/dev/null | head -n 1)";
              if [ -z "$FOUND" ]; then echo "ERROR: model file not found under $M (listing below)"; find "$M" -maxdepth 6 -ls || true; exit 3; fi;
              echo "Resolved model at: $FOUND";
              ln -sf "$FOUND" "$M/model.pkl" 2>/dev/null && echo "Symlinked to $M/model.pkl" || true;
              [ -e "$M/model.pkl" ] || { echo "Mount is read-only; copying to /tmp/models/model.pkl"; mkdir -p /tmp/models; cp -f "$FOUND" /tmp/models/model.pkl; export MODEL_MOUNT_DIR="/tmp/models"; };
              [ -e "$M/model.pkl" ] && export MODEL_MOUNT_DIR="$M";
              ls -la "${MODEL_MOUNT_DIR}";
              exec uvicorn --app-dir /app/src serve_cpiflow_kserve:app --host 0.0.0.0 --port ${PORT:-8080}
          env:
            - name: STORAGE_URI
              value: "{{inputs.artifacts.cpiflowmodel}}"
            - name: MODEL_MOUNT_DIR
              value: "/mnt/models"
          readinessProbe:
            httpGet: { path: /health, port: 8080 }
            initialDelaySeconds: 2
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /health, port: 8080 }
            initialDelaySeconds: 10
            periodSeconds: 10
